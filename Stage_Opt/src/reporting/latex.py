"""LaTeX report generation."""
import os
from datetime import datetime
from ..utils.config import OUTPUT_DIR, logger

def generate_report(results, stages, output_dir=OUTPUT_DIR):
    """Generate a LaTeX report with optimization results."""
    try:
        if not results:
            logger.error("No results to include in report")
            return None
            
        # Filter out failed optimizations
        valid_results = {k: v for k, v in results.items() if v is not None and 'optimal_dv' in v and 'stage_ratios' in v}
        if not valid_results:
            logger.error("No valid optimization results for report")
            return None
            
        report_path = os.path.join(output_dir, "optimization_report.tex")
        
        # Extract global parameters
        g0 = float(stages[0].get('G0', 9.81))  # Standard gravity
        total_dv = float(stages[0].get('TOTAL_DELTA_V', 0))  # Total required Î”V
        
        report_content = r"""\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage{float}
\usepackage{siunitx}
\title{Rocket Stage Optimization Results}
\author{Generated by Stage\_Opt}
\date{\today}

\begin{document}
\maketitle

\section{Introduction}
This report presents the results of optimizing a multi-stage rocket using various optimization methods. The objective was to minimize the payload mass fraction while satisfying the total delta-V requirement.

\section{Input Assumptions}
\subsection{Input Parameters}
\begin{table}[H]
\centering
\caption{Input Parameters}
\begin{tabular}{ll}
\toprule
Parameter & Value \\
\midrule
Gravitational Acceleration ($G_0$) & \SI{""" + f"{g0:.2f}" + r"""}{\meter\per\second\squared} \\
Total $\Delta V$ & \SI{""" + f"{total_dv:.1f}" + r"""}{\meter\per\second} \\
\bottomrule
\end{tabular}
\end{table}

\subsection{Stage Parameters}
\begin{table}[H]
\centering
\caption{Stage Parameters and Assumptions}
\begin{tabular}{cccc}
\toprule
Stage & ISP (\si{\second}) & Mass Fraction ($\epsilon$) & $G_0$ (\si{\meter\per\second\squared}) \\
\midrule
"""
        # Add stage data rows
        for i, stage in enumerate(stages):
            stage_g0 = float(stage.get('G0', g0))
            stage_isp = float(stage.get('ISP', 0))
            stage_epsilon = float(stage.get('EPSILON', 0))
            report_content += f"{i+1} & {stage_isp:.0f} & {stage_epsilon:.3f} & {stage_g0:.2f} \\\\\n"
            
        report_content += r"""\bottomrule
\end{tabular}
\end{table}

\section{Optimization Methods}
The following optimization methods were evaluated:
\begin{itemize}
"""
        # Add optimization methods
        for method in valid_results.keys():
            report_content += f"\\item {method}\n"

        report_content += r"""\end{itemize}

\section{Optimization Results}
\subsection{Performance Visualization}
\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{dv_breakdown.png}
\caption{$\Delta V$ Distribution Across Stages}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{execution_time.png}
\caption{Solver Execution Time Comparison}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{payload_fraction.png}
\caption{Payload Fraction Comparison}
\end{figure}

\section{Final Results Summary}
\begin{table}[H]
\centering
\caption{Optimization Results Summary}
\begin{tabular}{lS[table-format=1.4]S[table-format=1.4e2]S[table-format=1.2]}
\toprule
Method & {Payload Fraction} & {Error} & {Time (\si{\second})} \\
\midrule
"""
        # Add solver results
        for method, result in valid_results.items():
            try:
                payload = result['payload_fraction']
                time = result['execution_time']
                error = result.get('error', 0)
                # Pad method name for alignment
                method_padded = f"{method:<12}"
                report_content += f"{method_padded} & {payload:.4f} & {error:.4e} & {time:.2f} \\\\\n"
            except (KeyError, TypeError) as e:
                logger.warning(f"Skipping incomplete result for {method}: {e}")
                continue
                
        report_content += r"""\bottomrule
\end{tabular}
\end{table}

\subsection{Detailed Stage Results}
"""
        # Add detailed results for each method
        for method, result in valid_results.items():
            report_content += f"""
\\begin{{table}}[H]
\\centering
\\caption{{{method} Stage Results}}
\\begin{{tabular}}{{cS[table-format=4.1]S[table-format=1.4]S[table-format=3.1]}}
\\toprule
Stage & {{$\\Delta V$ (\\si{{\\meter\\per\\second}})}} & {{Mass Ratio ($\\lambda$)}} & {{Contribution (\\%)}} \\\\
\\midrule
"""
            total_dv = sum(result['optimal_dv'])
            for i, (dv, ratio) in enumerate(zip(result['optimal_dv'], result['stage_ratios'])):
                contribution = (dv / total_dv * 100) if total_dv > 0 else 0
                report_content += f"{i+1} & {dv:.1f} & {ratio:.4f} & {contribution:.1f} \\\\\n"
            
            report_content += r"""\midrule
\multicolumn{2}{l}{Total $\Delta V$:} & \multicolumn{2}{r}{\SI{""" + f"{total_dv:.1f}" + r"""}{\meter\per\second}} \\
\multicolumn{2}{l}{Payload Fraction:} & \multicolumn{2}{r}{""" + f"{result['payload_fraction']:.4f}" + r"""} \\
\bottomrule
\end{tabular}
\end{table}
"""

        report_content += r"\end{document}"

        # Write the report
        with open(report_path, 'w') as f:
            f.write(report_content)
            
        logger.info(f"LaTeX report generated: {report_path}")
        return report_path
        
    except Exception as e:
        logger.error(f"Error generating LaTeX report: {e}")
        return None

def generate_latex_report(results):
    """Generate a LaTeX report summarizing optimization results."""
    try:
        report_path = os.path.join(OUTPUT_DIR, 'optimization_report.tex')
        
        with open(report_path, 'w') as f:
            # Write LaTeX preamble
            f.write('\\documentclass{article}\n')
            f.write('\\usepackage[utf8]{inputenc}\n')
            f.write('\\usepackage{booktabs}\n')
            f.write('\\usepackage{graphicx}\n')
            f.write('\\usepackage{float}\n')
            f.write('\\usepackage{siunitx}\n')
            f.write('\\title{Rocket Stage Optimization Results}\n')
            f.write('\\author{Generated by Stage\\_Opt}\n')
            f.write('\\date{\\today}\n\n')
            
            # Begin document
            f.write('\\begin{document}\n')
            f.write('\\maketitle\n\n')
            
            # Introduction
            f.write('\\section{Introduction}\n')
            f.write('This report presents the results of optimizing a multi-stage rocket using various optimization methods. ')
            f.write('The objective was to minimize the payload mass fraction while satisfying the total delta-V requirement.\n\n')
            
            # Input Assumptions
            f.write('\\section{Input Assumptions}\n')
            
            # Load input parameters from input_data.json
            with open('input_data.json') as g:
                input_params = json.load(g)
            
            # Input Parameters Table
            f.write('\\subsection{Input Parameters}\n')
            f.write('\\begin{table}[H]\n')
            f.write('\\centering\n')
            f.write('\\caption{Input Parameters}\n')
            f.write('\\begin{tabular}{ll}\n')
            f.write('\\toprule\n')
            f.write('Parameter & Value \\\\\n')
            f.write('\\midrule\n')
            
            # Add input parameters
            for param, value in input_params.items():
                f.write(f"{param} & {value} \\\\\n")
            
            f.write('\\bottomrule\n')
            f.write('\\end{tabular}\n')
            f.write('\\end{table}\n\n')
            
            # Stage Parameters Table
            f.write('\\subsection{Stage Parameters}\n')
            f.write('\\begin{table}[H]\n')
            f.write('\\centering\n')
            f.write('\\caption{Stage Parameters and Assumptions}\n')
            f.write('\\begin{tabular}{cccc}\n')
            f.write('\\toprule\n')
            f.write('Stage & ISP (s) & Mass Fraction ($\\epsilon$) & Initial $\\Delta V$ (m/s) \\\\\n')
            f.write('\\midrule\n')
            
            # Add stage parameters
            for method, result in results.items():
                if 'stage_parameters' in result:
                    for i, params in enumerate(result['stage_parameters']):
                        f.write(f"{i+1} & {params['ISP']:.1f} & {params['epsilon']:.3f} & {params['initial_dv']:.1f} \\\\\n")
                    break  # Only need one set of parameters
            
            f.write('\\bottomrule\n')
            f.write('\\end{tabular}\n')
            f.write('\\end{table}\n\n')
            
            # Global Parameters Table
            f.write('\\subsection{Global Parameters}\n')
            f.write('\\begin{table}[H]\n')
            f.write('\\centering\n')
            f.write('\\caption{Global Parameters}\n')
            f.write('\\begin{tabular}{lS[table-format=4.2]}\n')
            f.write('\\toprule\n')
            f.write('Parameter & {Value} \\\\\n')
            f.write('\\midrule\n')
            
            # Add global parameters
            for method, result in results.items():
                if 'global_parameters' in result:
                    params = result['global_parameters']
                    f.write(f"Total $\\Delta V$ (m/s) & {params['TOTAL_DELTA_V']:.2f} \\\\\n")
                    f.write(f"Gravitational Acceleration (m/s$^2$) & {params['G0']:.2f} \\\\\n")
                    break  # Only need one set of parameters
            
            f.write('\\bottomrule\n')
            f.write('\\end{tabular}\n')
            f.write('\\end{table}\n\n')
            
            # Optimization Methods
            f.write('\\section{Optimization Methods}\n')
            f.write('The following optimization methods were evaluated:\n')
            f.write('\\begin{itemize}\n')
            for method in results.keys():
                f.write(f'\\item {method}\n')
            f.write('\\end{itemize}\n\n')
            
            # Visualizations
            f.write('\\section{Optimization Results}\n')
            f.write('\\subsection{Performance Visualization}\n')
            
            # Delta-V Distribution Plot
            f.write('\\begin{figure}[H]\n')
            f.write('\\centering\n')
            f.write('\\includegraphics[width=\\textwidth]{dv_breakdown.png}\n')
            f.write('\\caption{$\\Delta V$ Distribution Across Stages}\n')
            f.write('\\end{figure}\n\n')
            
            # Execution Time Plot
            f.write('\\begin{figure}[H]\n')
            f.write('\\centering\n')
            f.write('\\includegraphics[width=\\textwidth]{execution_time.png}\n')
            f.write('\\caption{Solver Execution Time Comparison}\n')
            f.write('\\end{figure}\n\n')
            
            # Payload Fraction Plot
            f.write('\\begin{figure}[H]\n')
            f.write('\\centering\n')
            f.write('\\includegraphics[width=\\textwidth]{payload_fraction.png}\n')
            f.write('\\caption{Payload Fraction Comparison}\n')
            f.write('\\end{figure}\n\n')
            
            # Final Results Table
            f.write('\\section{Final Results Summary}\n')
            f.write('\\begin{table}[H]\n')
            f.write('\\centering\n')
            f.write('\\caption{Optimization Results Summary}\n')
            f.write('\\begin{tabular}{lccr}\n')
            f.write('\\toprule\n')
            f.write('Method & Payload Fraction & Error & Time (s) \\\\\n')
            f.write('\\midrule\n')
            
            # Add results for each method
            for method, result in results.items():
                f.write(f'{method} & {result["payload_fraction"]:.4f} & {result["error"]:.4e} & {result["execution_time"]:.2f} \\\\\n')
            
            f.write('\\bottomrule\n')
            f.write('\\end{tabular}\n')
            f.write('\\end{table}\n\n')
            
            # Detailed Stage Results
            f.write('\\subsection{Detailed Stage Results}\n')
            for method, result in results.items():
                if 'optimal_dv' in result and 'stage_ratios' in result:
                    f.write(f'\\subsubsection{{{method}}}\n')
                    f.write('\\begin{table}[H]\n')
                    f.write('\\centering\n')
                    f.write(f'\\caption{{{method} Stage Results}}\n')
                    f.write('\\begin{tabular}{cccc}\n')
                    f.write('\\toprule\n')
                    f.write('Stage & $\\Delta V$ (m/s) & Mass Ratio & Contribution (\\%) \\\\\n')
                    f.write('\\midrule\n')
                    
                    total_dv = sum(result['optimal_dv'])
                    for i, (dv, ratio) in enumerate(zip(result['optimal_dv'], result['stage_ratios'])):
                        contribution = (dv / total_dv) * 100 if total_dv > 0 else 0
                        f.write(f"{i+1} & {dv:.1f} & {ratio:.3f} & {contribution:.1f} \\\\\n")
                    
                    f.write('\\bottomrule\n')
                    f.write('\\end{tabular}\n')
                    f.write('\\end{table}\n\n')
            
            f.write('\\end{document}\n')
            
        logger.info(f"LaTeX report generated at: {report_path}")
        return report_path
        
    except Exception as e:
        logger.error(f"Error generating LaTeX report: {str(e)}")
        return None
