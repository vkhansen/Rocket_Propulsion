"""LaTeX report generation."""
import os
import csv
import json
from datetime import datetime
from ..utils.config import OUTPUT_DIR, logger

def write_results_to_csv(results, stages, output_dir=OUTPUT_DIR):
    """Write optimization results to CSV files."""
    summary_path = None
    detailed_path = None
    
    try:
        # Ensure output directory exists
        os.makedirs(output_dir, exist_ok=True)
        
        # Write summary results
        try:
            summary_path = os.path.join(output_dir, "optimization_summary.csv")
            with open(summary_path, 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(['Method', 'Payload Fraction', 'Error', 'Time (s)'])
                for method, result in results.items():
                    if not all(k in result for k in ['payload_fraction', 'error', 'execution_time']):
                        logger.warning(f"Skipping incomplete result for {method}")
                        continue
                    writer.writerow([
                        method,
                        f"{result['payload_fraction']:.4f}",
                        f"{result['error']:.4e}",
                        f"{result['execution_time']:.2f}"
                    ])
            logger.info(f"Summary results written to {summary_path}")
        except Exception as e:
            logger.error(f"Failed to write summary CSV: {str(e)}")
            summary_path = None
        
        # Write detailed stage results
        try:
            detailed_path = os.path.join(output_dir, "stage_results.csv")
            with open(detailed_path, 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(['Method', 'Stage', 'Delta-V (m/s)', 'Mass Ratio', 'Contribution (%)'])
                for method, result in results.items():
                    if not all(k in result for k in ['dv', 'stage_ratios']):
                        logger.warning(f"Skipping incomplete stage data for {method}")
                        continue
                    total_dv = sum(result['dv'])
                    for i, (dv, ratio) in enumerate(zip(result['dv'], result['stage_ratios'])):
                        contribution = (dv / total_dv * 100) if total_dv > 0 else 0
                        writer.writerow([
                            method,
                            i + 1,
                            f"{dv:.1f}",
                            f"{ratio:.4f}",
                            f"{contribution:.1f}"
                        ])
            logger.info(f"Stage results written to {detailed_path}")
        except Exception as e:
            logger.error(f"Failed to write stage results CSV: {str(e)}")
            detailed_path = None
            
    except Exception as e:
        logger.error(f"Error in CSV generation: {str(e)}")
    
    return summary_path, detailed_path

def generate_report(results, stages, output_dir=OUTPUT_DIR):
    """Generate a LaTeX report with optimization results."""
    try:
        if not results:
            logger.error("No results to include in report")
            return None
            
        # Filter out failed optimizations
        valid_results = {k: v for k, v in results.items() if v is not None and 'dv' in v and 'stage_ratios' in v}
        if not valid_results:
            logger.error("No valid optimization results for report")
            return None
            
        # Write results to CSV
        write_results_to_csv(valid_results, stages, output_dir)
            
        report_path = os.path.join(output_dir, "optimization_report.tex")
        
        # Extract global parameters
        g0 = float(stages[0].get('G0', 9.81))  # Standard gravity
        total_dv = float(stages[0].get('TOTAL_DELTA_V', 0))  # Total required Î”V
        
        # Get current date
        current_date = datetime.now().strftime("%B %d, %Y")
        
        report_content = r"""\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage{float}
\usepackage{siunitx}
\title{Rocket Stage Optimization Results}
\author{Generated by Stage\_Opt}
\date{""" + current_date + r"""}

\begin{document}
\maketitle

\section{Introduction}
This report presents the results of optimizing a multi-stage rocket using various optimization methods. The objective was to minimize the payload mass fraction while satisfying the total delta-V requirement.

\section{Input Assumptions}
\subsection{Global Parameters}
\begin{table}[H]
\centering
\caption{Global Parameters}
\begin{tabular}{lS[table-format=4.2]}
\toprule
Parameter & {Value} \\
\midrule
Gravitational Acceleration ($G_0$) & \SI{""" + f"{g0:.2f}" + r"""}{\meter\per\second\squared} \\
Total $\Delta V$ Required & \SI{""" + f"{total_dv:.1f}" + r"""}{\meter\per\second} \\
\bottomrule
\end{tabular}
\end{table}

\subsection{Stage Parameters}
\begin{table}[H]
\centering
\caption{Stage Parameters and Assumptions}
\begin{tabular}{cS[table-format=3.0]S[table-format=1.3]}
\toprule
Stage & {ISP (\si{\second})} & {Mass Fraction ($\epsilon$)} \\
\midrule
"""
        # Add stage data rows
        for i, stage in enumerate(stages):
            stage_isp = float(stage.get('ISP', 0))
            stage_epsilon = float(stage.get('EPSILON', 0))
            report_content += f"{i+1} & {stage_isp:.0f} & {stage_epsilon:.3f} \\\\\n"
            
        report_content += r"""\bottomrule
\end{tabular}
\end{table}

\section{Optimization Methods}
The following optimization methods were evaluated:
\begin{itemize}
"""
        # Add optimization methods
        for method in valid_results.keys():
            report_content += f"\\item {method}\n"

        report_content += r"""\end{itemize}

\section{Optimization Results}
\subsection{Performance Visualization}
\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{dv_breakdown.png}
\caption{$\Delta V$ Distribution Across Stages}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{execution_time.png}
\caption{Solver Execution Time Comparison}
\end{figure}

\begin{figure}[H]
\centering
\includegraphics[width=\textwidth]{payload_fraction.png}
\caption{Payload Fraction Comparison}
\end{figure}

\section{Final Results Summary}
\begin{table}[H]
\centering
\caption{Optimization Results Summary}
\begin{tabular}{lS[table-format=1.4]S[table-format=1.4e-1]S[table-format=1.2]}
\toprule
Method & {Payload Fraction} & {Error} & {Time (\si{\second})} \\
\midrule
"""
        # Add solver results with consistent spacing
        for method, result in valid_results.items():
            try:
                payload = result['payload_fraction']
                time = result['execution_time']
                error = result.get('error', 0)
                # Pad method name for alignment
                method_padded = f"{method:<12}"
                report_content += f"{method_padded} & {payload:.4f} & {error:.4e} & {time:.2f} \\\\\n"
            except (KeyError, TypeError) as e:
                logger.warning(f"Skipping incomplete result for {method}: {e}")
                continue
                
        report_content += r"""\bottomrule
\end{tabular}
\end{table}

\subsection{Detailed Stage Results}
"""
        # Add detailed results for each method
        for method, result in valid_results.items():
            report_content += f"""
\\begin{{table}}[H]
\\centering
\\caption{{{method} Stage Results}}
\\begin{{tabular}}{{cS[table-format=4.1]S[table-format=1.4]S[table-format=3.1]}}
\\toprule
Stage & {{$\\Delta V$ (\\si{{\\meter\\per\\second}})}} & {{Mass Ratio ($\\lambda$)}} & {{Contribution (\\%)}} \\\\
\\midrule
"""
            total_dv = sum(result['dv'])
            for i, (dv, ratio) in enumerate(zip(result['dv'], result['stage_ratios'])):
                contribution = (dv / total_dv * 100) if total_dv > 0 else 0
                report_content += f"{i+1} & {dv:.1f} & {ratio:.4f} & {contribution:.1f} \\\\\n"
            
            report_content += r"""\midrule
\multicolumn{2}{l}{Total $\Delta V$:} & \multicolumn{2}{r}{\SI{""" + f"{total_dv:.1f}" + r"""}{\meter\per\second}} \\
\multicolumn{2}{l}{Payload Fraction:} & \multicolumn{2}{r}{""" + f"{result['payload_fraction']:.4f}" + r"""} \\
\bottomrule
\end{tabular}
\end{table}
"""

        report_content += r"\end{document}"

        # Write the report
        with open(report_path, 'w') as f:
            f.write(report_content)
            
        logger.info(f"LaTeX report generated: {report_path}")
        return report_path
        
    except Exception as e:
        logger.error(f"Error generating LaTeX report: {e}")
        return None
