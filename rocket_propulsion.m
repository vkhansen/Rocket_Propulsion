% Constants
CONSTANTS.G_0 = 9.81; % m/s^2, gravitational acceleration at Earth's surface

% Main function
function rocketPropulsionMain()
    % Example calls to functions (commented out for demonstration)
    % thrust_value = thrust(10, 3000, 101325, 101325, 0.05);
    % exhaust_vel = exhaust_velocity(300, CONSTANTS.G_0);
    % delta_v_value = delta_v(3000, 1000, 100);
    % specific_impulse_value = specific_impulse(10000, 10, CONSTANTS.G_0);
    % mass_flow = mass_flow_rate(1.2, 0.05, 3000);
    % area_ratio = nozzle_area_ratio(0.1, 0.01, 1.4, 2);
    % thermal_eff = thermal_efficiency(1000, 3000);
    % c_star = characteristic_velocity(1e6, 0.01, 10);
    % C_F = thrust_coefficient(1e5, 1e6, 0.01);
    % total_impulse_value = total_impulse(10000, 100);
    % heat_transfer = regenerative_cooling(1e6, 5, 500, 300, 400);
    % I_sp_theoretical = theoretical_specific_impulse(1.4, 287, 3000, 101325, 6e6, CONSTANTS.G_0);
end

% Thrust calculation
function thrust_value = thrust(mass_flow_rate, exhaust_velocity, exit_pressure, ambient_pressure, exit_area)
    % Calculate the total thrust of a rocket engine.
    %
    % Parameters:
    %   mass_flow_rate - Mass flow rate of the propellant (kg/s)
    %   exhaust_velocity - Velocity of exhaust gases (m/s)
    %   exit_pressure - Pressure at nozzle exit (Pa)
    %   ambient_pressure - Ambient pressure (Pa)
    %   exit_area - Area of nozzle exit (m^2)
    %
    % Returns:
    %   thrust_value - Thrust generated by the rocket (N)
    %
    % Throws:
    %   An error if exit pressure is less than ambient pressure
    validateattributes(mass_flow_rate, {'numeric'}, {'positive'}, 'thrust', 'mass_flow_rate');
    validateattributes(exhaust_velocity, {'numeric'}, {'nonnegative'}, 'thrust', 'exhaust_velocity');
    validateattributes(exit_pressure, {'numeric'}, {'nonnegative'}, 'thrust', 'exit_pressure');
    validateattributes(ambient_pressure, {'numeric'}, {'nonnegative'}, 'thrust', 'ambient_pressure');
    validateattributes(exit_area, {'numeric'}, {'positive'}, 'thrust', 'exit_area');
    
    if exit_pressure < ambient_pressure
        error('Exit pressure should not be less than ambient pressure for positive thrust contribution.');
    end
    thrust_value = mass_flow_rate * exhaust_velocity + (exit_pressure - ambient_pressure) * exit_area;
end

% Exhaust Velocity calculation
function exhaust_velocity = exhaust_velocity(specific_impulse, gravitational_acceleration)
    % Calculate the effective exhaust velocity.
    %
    % Parameters:
    %   specific_impulse - Specific impulse of the rocket (s)
    %   gravitational_acceleration - Acceleration due to gravity (m/s^2), default to Earth's
    %
    % Returns:
    %   exhaust_velocity - Effective exhaust velocity (m/s)
    if nargin < 2, gravitational_acceleration = CONSTANTS.G_0; end
    validateattributes(specific_impulse, {'numeric'}, {'nonnegative'}, 'exhaust_velocity', 'specific_impulse');
    validateattributes(gravitational_acceleration, {'numeric'}, {'positive'}, 'exhaust_velocity', 'gravitational_acceleration');
    exhaust_velocity = specific_impulse * gravitational_acceleration;
end

% Delta-v calculation
function delta_v = delta_v(exhaust_velocity, initial_mass, final_mass)
    % Calculate the delta-v using the Tsiolkovsky rocket equation.
    %
    % Parameters:
    %   exhaust_velocity - Effective exhaust velocity (m/s)
    %   initial_mass - Initial mass of the rocket (kg)
    %   final_mass - Final mass of the rocket after fuel burn (kg)
    %
    % Returns:
    %   delta_v - Change in velocity (m/s)
    %
    % Throws:
    %   An error if initial mass is not greater than final mass
    validateattributes(exhaust_velocity, {'numeric'}, {'positive'}, 'delta_v', 'exhaust_velocity');
    validateattributes(initial_mass, {'numeric'}, {'positive'}, 'delta_v', 'initial_mass');
    validateattributes(final_mass, {'numeric'}, {'positive'}, 'delta_v', 'final_mass');
    
    if initial_mass <= final_mass
        error('Initial mass must be greater than final mass for positive delta-v.');
    end
    delta_v = exhaust_velocity * log(initial_mass / final_mass);
end

% Specific Impulse calculation
function specific_impulse = specific_impulse(thrust, mass_flow_rate, gravitational_acceleration)
    % Calculate the specific impulse.
    %
    % Parameters:
    %   thrust - Thrust generated by the rocket (N)
    %   mass_flow_rate - Mass flow rate of the propellant (kg/s)
    %   gravitational_acceleration - Acceleration due to gravity (m/s^2), default to Earth's
    %
    % Returns:
    %   specific_impulse - Specific impulse (s)
    %
    % Throws:
    %   An error if mass flow rate is zero
    if nargin < 3, gravitational_acceleration = CONSTANTS.G_0; end
    validateattributes(thrust, {'numeric'}, {'nonnegative'}, 'specific_impulse', 'thrust');
    validateattributes(mass_flow_rate, {'numeric'}, {'positive'}, 'specific_impulse', 'mass_flow_rate');
    validateattributes(gravitational_acceleration, {'numeric'}, {'positive'}, 'specific_impulse', 'gravitational_acceleration');
    
    if mass_flow_rate == 0
        error('Mass flow rate cannot be zero for specific impulse calculation.');
    end
    specific_impulse = thrust / (mass_flow_rate * gravitational_acceleration);
end

% Mass Flow Rate calculation
function mass_flow_rate = mass_flow_rate(density_exit, area_exit, exhaust_velocity)
    % Calculate the mass flow rate.
    %
    % Parameters:
    %   density_exit - Density of exhaust gases at nozzle exit (kg/m^3)
    %   area_exit - Area of nozzle exit (m^2)
    %   exhaust_velocity - Velocity of exhaust gases (m/s)
    %
    % Returns:
    %   mass_flow_rate - Mass flow rate of the propellant (kg/s)
    validateattributes(density_exit, {'numeric'}, {'nonnegative'}, 'mass_flow_rate', 'density_exit');
    validateattributes(area_exit, {'numeric'}, {'positive'}, 'mass_flow_rate', 'area_exit');
    validateattributes(exhaust_velocity, {'numeric'}, {'nonnegative'}, 'mass_flow_rate', 'exhaust_velocity');
    
    mass_flow_rate = density_exit * area_exit * exhaust_velocity;
end

% Nozzle Area Ratio calculation
function area_ratio = nozzle_area_ratio(area_exit, area_throat, gamma, mach_exit)
    % Calculate the nozzle area ratio.
    %
    % Parameters:
    %   area_exit - Area of nozzle exit (m^2)
    %   area_throat - Area of nozzle throat (m^2)
    %   gamma - Ratio of specific heats
    %   mach_exit - Mach number at nozzle exit
    %
    % Returns:
    %   area_ratio - Ratio of exit area to throat area
    validateattributes(area_exit, {'numeric'}, {'positive'}, 'nozzle_area_ratio', 'area_exit');
    validateattributes(area_throat, {'numeric'}, {'positive'}, 'nozzle_area_ratio', 'area_throat');
    validateattributes(gamma, {'numeric'}, {'positive'}, 'nozzle_area_ratio', 'gamma');
    validateattributes(mach_exit, {'numeric'}, {'nonnegative'}, 'nozzle_area_ratio', 'mach_exit');
    
    term1 = (gamma + 1) / 2;
    term2 = 1 + (gamma - 1) / 2 * mach_exit^2;
    area_ratio = (area_exit / area_throat) / ((term1^(term1 / (gamma - 1))) * (1 / mach_exit) * (term2^((gamma + 1) / (2 * (gamma - 1)))));
end

% Thermal Efficiency calculation (simplified Carnot efficiency)
function efficiency = thermal_efficiency(temperature_exit, temperature_chamber)
    % Calculate the thermal efficiency.
    %
    % Parameters:
    %   temperature_exit - Temperature at nozzle exit (K)
    %   temperature_chamber - Temperature in combustion chamber (K)
    %
    % Returns:
    %   efficiency - Thermal efficiency (fraction)
    %
    % Throws:
    %   An error if exit temperature is not less than chamber temperature
    validateattributes(temperature_exit, {'numeric'}, {'positive'}, 'thermal_efficiency', 'temperature_exit');
    validateattributes(temperature_chamber, {'numeric'}, {'positive'}, 'thermal_efficiency', 'temperature_chamber');
    
    if temperature_exit >= temperature_chamber
        error('Exhaust temperature cannot be greater than or equal to combustion chamber temperature.');
    end
    efficiency = 1 - (temperature_exit / temperature_chamber);
end

% Characteristic Velocity calculation
function characteristic_velocity = characteristic_velocity(pressure_chamber, area_throat, mass_flow_rate)
    % Calculate the characteristic velocity (c*).
    %
    % Parameters:
    %   pressure_chamber - Chamber pressure (Pa)
    %   area_throat - Area of nozzle throat (m^2)
    %   mass_flow_rate - Mass flow rate of the propellant (kg/s)
    %
    % Returns:
    %   characteristic_velocity - Characteristic velocity (m/s)
    %
    % Throws:
    %   An error if mass flow rate is zero
    validateattributes(pressure_chamber, {'numeric'}, {'positive'}, 'characteristic_velocity', 'pressure_chamber');
    validateattributes(area_throat, {'numeric'}, {'positive'}, 'characteristic_velocity', 'area_throat');
    validateattributes(mass_flow_rate, {'numeric'}, {'positive'}, 'characteristic_velocity', 'mass_flow_rate');
    
    if mass_flow_rate == 0
        error('Mass flow rate cannot be zero for characteristic velocity calculation.');
    end
    characteristic_velocity = (pressure_chamber * area_throat) / mass_flow_rate;
end

% Thrust Coefficient calculation
function thrust_coefficient = thrust_coefficient(thrust, pressure_chamber, area_throat)
    % Calculate the thrust coefficient.
    %
    % Parameters:
    %   thrust - Thrust generated by the rocket (N)
    %   pressure_chamber - Chamber pressure (Pa)
    %   area_throat - Area of nozzle throat (m^2)
    %
    % Returns:
    %   thrust_coefficient - Thrust coefficient
    %
    % Throws:
    %   An error if throat area is zero
    validateattributes(thrust, {'numeric'}, {'nonnegative'}, 'thrust_coefficient', 'thrust');
    validateattributes(pressure_chamber, {'numeric'}, {'positive'}, 'thrust_coefficient', 'pressure_chamber');
    validateattributes(area_throat, {'numeric'}, {'positive'}, 'thrust_coefficient', 'area_throat');
    
    if area_throat == 0
        error('Throat area cannot be zero for thrust coefficient calculation.');
    end
    thrust_coefficient = thrust / (pressure_chamber * area_throat);
end

% Total Impulse calculation
function total_impulse = total_impulse(thrust, burn_time)
    % Calculate the total impulse.
    %
    % Parameters:
    %   thrust - Thrust generated by the rocket (N)
    %   burn_time - Duration of burn (s)
    %
    % Returns:
    %   total_impulse - Total impulse (Ns)
    validateattributes(thrust, {'numeric'}, {'nonnegative'}, 'total_impulse', 'thrust');
    validateattributes(burn_time, {'numeric'}, {'nonnegative'}, 'total_impulse', 'burn_time');
    
    total_impulse = thrust * burn_time;
end

% Regenerative Cooling calculation
function heat_transfer_rate = regenerative_cooling(heat_transfer_rate, mass_flow_coolant, specific_heat_capacity, temperature_in, temperature_out)
    % Calculate the rate of heat transfer in regenerative cooling.
    %
    % Parameters:
    %   heat_transfer_rate - Heat transfer rate (W), used as an output parameter for verification
    %   mass_flow_coolant - Mass flow rate of coolant (kg/s)
    %   specific_heat_capacity - Specific heat capacity of coolant (J/kg·K)
    %   temperature_in - Inlet temperature of coolant (K)
    %   temperature_out - Outlet temperature of coolant (K)
    %
    % Returns:
    %   heat_transfer_rate - Heat transfer rate calculated (W)
    validateattributes(mass_flow_coolant, {'numeric'}, {'positive'}, 'regenerative_cooling', 'mass_flow_coolant');
    validateattributes(specific_heat_capacity, {'numeric'}, {'positive'}, 'regenerative_cooling', 'specific_heat_capacity');
    validateattributes(temperature_in, {'numeric'}, {'nonnegative'}, 'regenerative_cooling', 'temperature_in');
    validateattributes(temperature_out, {'numeric'}, {'nonnegative'}, 'regenerative_cooling', 'temperature_out');
    
    heat_transfer_rate = mass_flow_coolant * specific_heat_capacity * (temperature_out - temperature_in);
end

% Theoretical Specific Impulse calculation
function theoretical_specific_impulse = theoretical_specific_impulse(gamma, gas_constant, temperature_chamber, pressure_exit, pressure_chamber, gravitational_acceleration)
    % Estimate theoretical specific impulse.
    %
    % Parameters:
    %   gamma - Ratio of specific heats
    %   gas_constant - Specific gas constant (J/kg·K)
    %   temperature_chamber - Temperature in combustion chamber (K)
    %   pressure_exit - Pressure at nozzle exit (Pa)
    %   pressure_chamber - Chamber pressure (Pa)
    %   gravitational_acceleration - Acceleration due to gravity (m/s^2), default to Earth's
    %
    % Returns:
    %   theoretical_specific_impulse - Theoretical specific impulse (s)
    if nargin < 6, gravitational_acceleration = CONSTANTS.G_0; end
    validateattributes(gamma, {'numeric'}, {'positive'}, 'theoretical_specific_impulse', 'gamma');
    validateattributes(gas_constant, {'numeric'}, {'positive'}, 'theoretical_specific_impulse', 'gas_constant');
    validateattributes(temperature_chamber, {'numeric'}, {'positive'}, 'theoretical_specific_impulse', 'temperature_chamber');
    validateattributes(pressure_exit, {'numeric'}, {'nonnegative'}, 'theoretical_specific_impulse', 'pressure_exit');
    validateattributes(pressure_chamber, {'numeric'}, {'positive'}, 'theoretical_specific_impulse', 'pressure_chamber');
    validateattributes(gravitational_acceleration, {'numeric'}, {'positive'}, 'theoretical_specific_impulse', 'gravitational_acceleration');
    
    term1 = (2 * gamma / (gamma - 1)) * gas_constant * temperature_chamber;
    term2 = 1 - (pressure_exit / pressure_chamber)^((gamma - 1) / gamma);
    theoretical_specific_impulse = (1 / gravitational_acceleration) * sqrt(term1 * term2);
end